type ScenariosConnection {
  totalCount: Int!
  edges: [ScenarioEdge!]!
  pageInfo: PageInfo!
}

type ModulesConnection {
  totalCount: Int!
  edges: [ModuleEdge!]!
  pageInfo: PageInfo!
}

type GameEdge {
  node: Game!
  cursor: Cursor!
}

type Mutation {
  newGame(newGame: NewGame!): Game!
}

type Map {
  path: String!
  name: String
  isValid: Boolean!
  errors: [String!]!
}

type ScenarioEdge {
  node: Scenario!
  cursor: Cursor!
}

type ModuleConfig {
  id: String!
  name: String!
  version: String!
  config: Json!
}

scalar Cursor

type Query {
  "Currently running version of Battlefield server"
  version: String!
  "Lists scenarios loaded by this server"
  scenariosConnection(first: Int, after: Cursor, last: Int, before: Cursor): ScenariosConnection!
  "Lists scenarios loaded by this server"
  mapsConnection(first: Int, after: Cursor, last: Int, before: Cursor): MapsConnection!
  "Lists modules loaded by this server"
  modulesConnection(first: Int, after: Cursor, last: Int, before: Cursor): ModulesConnection!
  "Lists games played on this server"
  gamesConnection(first: Int, after: Cursor, last: Int, before: Cursor): GamesConnection!
  "Retrieve a specific game by ID."
  game(id: String!): Game!
}

scalar Json

type MapsConnection {
  totalCount: Int!
  edges: [ModuleEdge!]!
  pageInfo: PageInfo!
}

type Game {
  id: String!
  commands(player: String!): [Json!]!
  simulate(command: Json!, player: String!): Json!
  scenario: Json!
  state: Json!
  live: LiveGame
}

type GamesConnection {
  totalCount: Int!
  edges: [GameEdge!]!
  pageInfo: PageInfo!
}

input NewGame {
  scenario: String!
  players: [String!]!
}

type LiveGame {
  id: String!
  scenario: Json!
  state: Json!
  commands(player: String!): [Json!]!
}

type Scenario {
  path: String!
  name: String!
  isValid: Boolean!
  description: String
  modules: [ModuleConfigEntry!]
  errors: [String!]!
}

type ModuleEdge {
  node: Map!
  cursor: Cursor!
}

type ModuleConfigEntry {
  key: String!
  value: ModuleConfig!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: Cursor!
  endCursor: Cursor!
}

schema {
  query: Query
  mutation: Mutation
}

